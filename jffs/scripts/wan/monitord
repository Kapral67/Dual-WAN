#!/bin/sh
#########################################################################
# WAN process monitor daemon
#
# Monitors: linkd, udhcpc, procmon, and cron
#
# Author: David Medders
# Editor: Maxwell Kapral
#########################################################################

. /jffs/scripts/wan/global

#LOGLEVEL=$LOG_DEBUG     # overriding LOGLEVEL
#FILELEVEL=$LOGLEVEL
#LOGOVERRIDE=1

CRONALARM=$TMPDIR/cronalarm

HBFILE=$TMPDIR/$HBROOT.monitord                # heartbeat file

reload () {  # reload global configuration
  . /jffs/scripts/wan/global
}

trap '
  reload
  wanlogger $LOG_INFO "$BN: Reload configuration #08 monitord"
' SIGUSR2

checkhb () {
  if [ $# -ne 2 ]; then
    echo "Usage: gethb <process> <fail time>"
    wanlogger $LOG_ERR "Usage: gethb <process> <fail time>"
    return 1
  fi

  HBTIME=`cat $TMPDIR/$HBROOT.$1 | cut -f1 -d' '`

  wanlogger $LOG_DEBUG "$BN: gethb $1 $2 $HBTIME"

  if [ -z $HBTIME ]; then   # allow time for hb write to complete, then reread
    sleep 1                 # See Note 1 below
    HBTIME=`cat $TMPDIR/$HBROOT.$1 | cut -f1 -d' '`
    wanlogger $LOG_DEBUG "$BN: gethb $1 $2 reread $HBTIME"
  fi

  if [ `date +%s` -gt $(($HBTIME+$2)) ]; then
    return 1
  else
    return 0
  fi                                        
}

wanlogger $LOG_DEBUG "$BN: starting"

PIDFILE=$PIDDIR/monitord.pid	# PID file

ps | grep `cat $PIDFILE` | grep "monitord" >/dev/null
if [ $? -eq 0 ]; then
  wanlogger $LOG_ERR "$BN: monitord already running"
  exit 1
fi

echo $$ > $PIDFILE

date '+%s %d%b%g %H%M%S' > $TMPDIR/$HBROOT.procmon # allow time for cron to run
rm $CRONALARM

while true; do
  date '+%s %d%b%g %H%M%S' > $HBFILE        # heartbeat for process monitor

  sleep $CHECKRATE    # delay between status checks
 
  # check udhcpc daemons
  for WAN in $WANLIST; do
    UDHCPCPID=$PIDDIR/udhcpc-${WAN}.pid

    ps | grep `cat $UDHCPCPID` | grep "udhcpc" >/dev/null
    if [ $? -ne 0 ]; then    # launch udhcpc
      wanlogger $LOG_NOTICE "$BN: restarting udhcpc for $WAN #08 udhcpc"
      udhcpc -i `nvram get ${WAN}_ifname` -p $UDHCPCPID -s $WANDIR/udhcpc-${WAN} &
      sleep 5  # allow time for udhcpc daemon start
    fi
  done
  
  # check linkd daemons
  for WAN in $WANLIST; do
    HBRATE=`eval echo $"HBRATE${WAN}"`
    checkhb $WAN $HBRATE
    if [ $? -ne 0 ]; then # heartbeat fail
      LINKDPID=$PIDDIR/linkd${WAN}.pid
      wanlogger $LOG_WARNING "$BN: heartbeat fail for linkd $WAN"

      ps | grep `cat $LINKDPID` | grep linkd >/dev/null
      if [ $? -eq 0 ]; then     # linkd is still in the process table
        wanlogger $LOG_ERR "$BN: linkd $WAN in process table, killing"
        kill -9 `cat $LINKDPID`
        sleep 2
      fi

      wanlogger $LOG_WARNING "$BN: restarting linkd $WAN #08 linkd"
      $WANDIR/linkd $WAN &
    fi
  done

  # check that cron is running procmon
  
  checkhb procmon $CRONALARMTIME
  if [ $? -ne 0 ]; then # heartbeat fail
    wanlogger $LOG_DEBUG "$BN: `date +%s` HBTIME $HBTIME CRONALARMTIME $CRONALARMTIME"
    if [ ! -f $CRONALARM ]; then   # cron alarm has not been issued
      wanlogger $LOG_WARNING "$BN: heartbeat fail for procmon at `date '+%d%b%g %H%M%S'` hb `cat $TMPDIR/$HBROOT.procmon` #08 procmon"
      $SENDSTATUS "cron error" "cron heartbeat failure at `date '+%d%b%g %H%M%S'` hb `cat $TMPDIR/$HBROOT.procmon`" &
      stopservice $CROND   # restart cron daemon
      startservice $CROND
      touch $CRONALARM     # prevent multiple alarms
    fi
  elif [ -f $CRONALARM ]; then
    wanlogger $LOG_WARNING "$BN: heartbeat resumed for procmon at `date '+%d%b%g %H%M%S'`"
    $SENDSTATUS "cron resume" "cron heartbeat resumed at `date '+%d%b%g %H%M%S'`" &
    rm $CRONALARM          # cron running again, reset alarm
  fi
done

wanlogger $LOG_ERR "$BN: abnormal exit"
exit 2

#############################################################################
# Note 1: This re-read exists to eliminate false heartbeat failures due to
#         pre-emptive multi-tasking.  Heartbeat write in monitored applications
#         is occasionally task switched after the heartbeat file is truncated,
#         but before the new heartbeat timestamp is written.  The one second
#         sleep allows time for the heartbeat write to complete.
#############################################################################
